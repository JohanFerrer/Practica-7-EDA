Clist.h
-------------------------------------------------------------------------------------------------------------------------------------------
#ifndef CLIST_H
#define CLIST_H
#include "node.h"
#include <stdbool.h>

typedef struct _clist clist;

struct _clist
{
    node *head;
    int num;
}; 

clist* create_list();
void delete_list(clist *l);

// Funciones para agregar en la lista
bool add_init(clist *l, DATA data);
bool add_end(clist *l, DATA data);
bool add(clist *l, DATA data, int pos);

// Función para eliminar algun dato
bool remove_data(clist *l, DATA data);

// Funciones para eliminar por posición
DATA delete_init(clist *l);
DATA delete_end(clist *l);
DATA delete_data(clist*l,int pos);

// Funciones para buscar
int search_data(clist *l, DATA data); //
DATA search_pos(clist *l, int pos); // Busca posisicon y regresa el dato que se encuentra en esa posicion
node *serch_node(clist *l, DATA data); //regresa el nodo que coniene ese dato 

// Funciones para ultimo y pernultimo 
node *ultimo(clist *l);
node *penultimo(clist *l);
node *anterior(clist *l, int pos);
node *actual(clist *l, int pos);

// Funcion para imprimir
void print_list(clist *l);

bool is_empty(clist *l);
void empty(clist *l);

#endif
----------------------------------------------------------------------------------------------------------------------------------------

Clist.c
----------------------------------------------------------------------------------------------------------------------------------------
#include "Clist.h"
#include <stdio.h>
#include <stdlib.h>


clist* create_list(){
    clist *t; //crear lista temporal
    t = (clist*)malloc(sizeof(clist));
    t->head = NULL;
    t->num = 0;
    return t;
}

//Borra toda la lista
void delete_list(clist *l){ 
    if (is_empty(l));
        empty(l);
    free(l);
}

// Funciones para agregar en la lista
bool add_init(clist *l, DATA data){
    if(l == NULL) return false;
    if(is_empty(l)){
        l->head = create_node(data);
        l->head->next = l->head; //Esta es lo que la hace circular
        l->num = 1;
        return true;
    }
        node *nuevo = create_node(data);
        nuevo->next = l->head;
        l->head = nuevo;
        node *ult = ultimo (l);
        ult->next = l->head;
        l->num++;
        return true;
}
bool add_end(clist *l, DATA data){
    if(l==NULL) return false;
    if(is_empty(l)){
        l->head = create_node(data);
        l->head->next = l->head; //Cirular
        l->num = 1;
        return true;
    }
    node *nuevo = create_node(data);
    node *fin = ultimo(l);
    fin->next = create_node(data);
    nuevo->next = l->head; //Circular 
    l->num++;
    return true;
}
bool add(clist *l, DATA data, int pos){
    if(l==NULL) return false;
    if(pos == 0 || is_empty(l)){
        return add_init(l, data); //si pos es = 0 le pasamos la lista y el dato 
    }else if(pos==l->num){
        return add_end(l, data); //"return" retornara lo que retornan esas funciones 
    }else if( pos >0 && pos <l->num){
      node *act = actual(l, pos); 
      node *ant = anterior(l, pos);
      node *nuevo = create_node(data);
      ant->next = nuevo;
      nuevo->next = act;
      l->num++;
      return true;
    }else 
        return false; 
}

//Función para eliminar un dato
bool remove_data(clist *l, DATA data){
    if(l==NULL) return false;
    node *t = l->head;
    node *ant, *act;
    int i = 0;
    while(t!=NULL){
        if(t->data == data){
            break; //break nos servira para romper el ciclo 
        }
        t= t->next;
        i++; //con i obtenemos la posicion del nodo actual
    }
    ant = actual(l, i-1);
    act = actual(l, i);
    if(act == l->head){ //lista circular
        delete_init(l);
        return true;//
    }else if(act == ultimo(l)){//
        delete_end(l);
        return true;//
    }
    ant->next = act->next;
    act->next = NULL;
    delete_node(act);
    l->num--;
    return true; //Retornara el true si la lista esta vacia 
}

//Funciones para eliminar por posición
DATA delete_init(clist *l){
    if(l==NULL) return -1;
    if(is_empty(l)){
        node *t = l->head;
        int d = t->data;
        l->head = l->head->next;
        node *ult = ultimo(l); //LISTA CIRCULAR
        ult->next = l->head; //
        t->next = NULL;
        delete_node(t);
        l->num--; //quitamos 1
        return d; //recuperamos el dato gracias al int d
    }
    return -1;
}

DATA delete_end(clist *l){
    if(l==NULL) return -1; //Este caso es cuando no hay nada desde el principio de la lista 
    if(is_empty(l)){
       node *ult = ultimo(l);
       node *t = penultimo(l);
        int d = ult->data;      
        t->next = l->head;  //Circular
        delete_node(ult);
        l->num--;
        return d;
    }
    return -1; //Estes es para cuando la lsta esta vacia 
}
DATA delete_data(clist*l,int pos){
    int d;
    if(l==NULL) return -1;
    if(pos == 0){
        return delete_init(l);
    }else if(pos==l->num-1){
        return delete_end(l);
    }else if( pos >0 && pos <l->num-2){
       node *ult = actual(l, pos);
       node *ant = actual(l, pos-1);
       ant->next = ult->next;
       ult->next = NULL;
       delete_node(ult);
       l->num--;
       return d;
    }else 
        return -1;
}

//Funciones para buscar
/*
 * @return la posición de un dato en la lista
 */
int search_data(clist *l, DATA data){
    int pos;
    node *t;
    for(pos=0, t =l->head; data != t->data && t->next!=l->head; pos++,t=t->next); //LISTA CIRCULAR 
    if(pos >=l->num) return -1;
    return pos;
}

DATA search_pos(clist *l, int pos){
    node *t;
    int i;
    for(i=1, t = l->head; i<pos; i++,t= t->next); 
    if(t!=NULL) return t->data;
    return -1;
}

node *serch_node(clist *l, DATA data){
 int data;
    node *t;
    if (data=0){
        return -1;
    } else if{
    for (t->data=0; t->data == data, t->data++)
    return data;
    } else if {
        printf("El nodo no esta en esta lista\n");
    }
}

node *ultimo(clist *l){
    node *t = l-> head;
    while (t->next != l->head){ //Circular
        t = t->next;
    }
    return t;
}

node *penultimo(clist *l){
    node *t = l->head;
    while(t->next->next != l->head)//Circular, apuntara al primer nodo
        t = t->next;
    return t;
}

//Nos regresa el nodo anterior una posicion 
node *anterior(clist *l, int pos){
     node *t = l->head;
    int i= 0;
    while (t->next != l->head && i < pos-1)
        t = t->next;
    return t;
}

node *actual(clist *l, int pos){
    node *t = l->head;
    int i= 0;
    while (t->next != l->head && i < pos)
        t = t->next;
    return t;

}

void print_list(clist *l){
    node *t= l->head;
    while (t->next != l->head){
        printf("Dato: %i\n", t->data);
        t = t->next;
    }
}

bool is_empty(clist *l){
    if (l->head == NULL) return true;
    return false;
}

//Borra toda la lista para dejarla vacia 
void empty(clist *l){
    node *t = ultimo(l);
    node *ant;
    while (t != NULL && t != l->head){  
        ant = penultimo(l);
        ant -> next = NULL;
        delete_node(t); 
        t = ultimo(l);
    }
    delete_node(l->head);
    l->num = 0;
}
